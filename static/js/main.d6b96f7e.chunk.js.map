{"version":3,"sources":["js/reducers/mainReducer.ts","js/reducers/index.ts","js/constants/action-types.ts","js/utils/stringUtil.ts","js/sagas/api-saga.ts","js/store/index.ts","js/middleware/index.ts","js/actions/index.ts","js/components/List.tsx","js/components/Picker/Dropdown.tsx","js/components/Form/DynamicText.tsx","js/utils/arrayUtil.ts","js/components/Form.tsx","env.js","js/components/Alert/TelegramDismissible.tsx","js/components/App.tsx","serviceWorker.js","index.tsx"],"names":["initialState","seeds","rootReducer","combineReducers","main","state","action","type","Object","assign","telegram","payload","show","StringUtil","text","toString","length","trim","watcherSage","workerSaga","takeEvery","call","getData","put","fetch","then","response","json","initializeSagaMiddleware","createSagaMiddleware","storeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","dispatch","next","newMnemonic","strMnemonic","mnemonic","join","bip39","genCustomMnemonic","e","console","error","variant","message","isNullOrEmpty","id","uuidv1","addMnemonic","run","apiSaga","List","connect","className","map","el","key","Dropdown","onChange","this","props","src","ref","selectedValue","title","marginClass","bind","value","disabled","keys","idx","item","React","Component","DynamicText","onInputChange","options","myRefs","index","uid","arr_dom","hidden","push","maxResults","selected","renderReptileText","ArrayUtil","num","arr","i","ConnectedForm","strength_list","12","15","18","24","repeatElement","strength","handleStrengthChange","handleSubmit","handleMnemonicChange","handleMnemonicInputChange","event","target","clear","setState","new_mnemonic","preventDefault","dismissTelegram","genMnemonic","forEach","wordlists","english","onSubmit","htmlFor","Form","seed","VERSION","pjson","version","REPOSITORY","repository","url","TAG","TelegramDismissible","setShow","Alert","onClose","dismissible","Heading","marginTop","marginLeft","marginRight","margin","App","Container","fluid","Navbar","fixed","expand","bg","Brand","href","Nav","Link","size","icon","style","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","noop","warn","library","add","fab","render","document","getElementById","URL","process","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d6b96f7e.chunk.js","sourcesContent":["import {MainState} from \"./types\";\nimport {MnemonicActionTypes} from \"../actions/types\";\nimport {ADD_MNEMONIC, DISMISS_TELEGRAM, FOUND_ERROR} from \"../constants/action-types\";\n\nconst initialState = {\n    seeds: []\n};\n\nexport function mainReducer(state: MainState = initialState, action: MnemonicActionTypes): MainState {\n    if (action.type === FOUND_ERROR) {\n        return Object.assign({}, state, {\n            telegram: {...action.payload}\n        });\n    }\n    if (action.type === DISMISS_TELEGRAM) {\n        return Object.assign({}, state, {\n            telegram: Object.assign({}, state.telegram, {show: false})\n        });\n    }\n    if (action.type === ADD_MNEMONIC) {\n        return Object.assign({}, state, {\n            seeds: [...state.seeds, action.payload]\n        });\n    }\n    return state;\n};\n","import {combineReducers} from 'redux';\nimport {MainState} from \"./types\";\nimport {mainReducer} from \"./mainReducer\";\n\nexport interface AppState {\n    main: MainState\n}\n\nconst rootReducer = combineReducers<AppState>({\n    main: mainReducer\n});\n\nexport default rootReducer;\n","export const DATA_REQUESTED = \"DATA_REQUESTED\";\nexport const DATA_LOADED = \"DATA_LOADED\";\nexport const API_ERRORED = \"API_ERRORED\";\nexport const GEN_MNEMONIC = \"GEN_MNEMONIC\";\nexport const ADD_MNEMONIC = \"ADD_MNEMONIC\";\nexport const FOUND_ERROR = \"FOUND_ERROR\";\nexport const DISMISS_TELEGRAM = \"DISMISS_TELEGRAM\";\n","export class StringUtil {\n    static isNullOrEmpty(text: String) {\n        if (typeof(text) === \"undefined\" || text === null) {\n            return true;\n        } else if (typeof(text) !== 'string') {\n            text = text.toString();\n        }\n        return text.length === 0 || text.trim().length === 0;\n    }\n}\n","import {takeEvery, call, put} from \"redux-saga/effects\";\nimport {API_ERRORED, DATA_LOADED, DATA_REQUESTED} from \"../constants/action-types\";\n\nexport default function* watcherSage() {\n    yield takeEvery(DATA_REQUESTED, workerSaga);\n}\n\nfunction* workerSaga() {\n    try {\n        const payload = yield call(getData);\n        yield put({type: DATA_LOADED, payload});\n    } catch (e) {\n        yield put({type: API_ERRORED, payload: e});\n    }\n}\n\nfunction getData() {\n    return fetch(\"https://jsonplaceholder.typicode.com/posts\").then(response =>\n        response.json()\n    );\n}\n","import {applyMiddleware, compose, createStore} from \"redux\";\nimport rootReducer from \"../reducers/index\";\nimport {MainMiddleware} from \"../middleware\";\nimport createSagaMiddleware from \"redux-saga\";\nimport apiSaga from \"../sagas/api-saga\";\n\nconst initializeSagaMiddleware = createSagaMiddleware();\n\nconst storeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n    rootReducer,\n    storeEnhancers(applyMiddleware(MainMiddleware, initializeSagaMiddleware))\n);\n\ninitializeSagaMiddleware.run(apiSaga);\n\nexport default store;\n","import {MnemonicActionTypes} from \"../actions/types\";\nimport {Dispatch} from \"redux\";\nimport {GEN_MNEMONIC} from \"../constants/action-types\";\nimport {StringUtil} from \"../utils/stringUtil\";\nimport {addMnemonic, foundError} from \"../actions\";\nimport uuidv1 from \"uuid\";\n// @ts-ignore\nimport bip39 from \"bip39\";\n\ninterface MiddlewareProps {\n    dispatch: Dispatch\n}\n\nexport function MainMiddleware({dispatch}: MiddlewareProps) {\n    return function (next: Function) {\n        return function (action: MnemonicActionTypes) {\n            if (action.type === GEN_MNEMONIC) {\n                const strMnemonic = action.payload.mnemonic.join(\" \");\n                let newMnemonic;\n                try {\n                    newMnemonic = bip39.genCustomMnemonic(strMnemonic);\n                } catch (e) {\n                    console.error(e);\n                    return dispatch(foundError({variant: \"danger\", message: e.message, show: true}));\n                }\n\n                if (!StringUtil.isNullOrEmpty(newMnemonic)) {\n                    const id = uuidv1();\n                    return dispatch(addMnemonic({\n                        id: id,\n                        mnemonic: newMnemonic\n                    }));\n                }\n            }\n            return next(action);\n        }\n    }\n}\n","import {ADD_MNEMONIC, DISMISS_TELEGRAM, FOUND_ERROR, GEN_MNEMONIC} from \"../constants/action-types\";\nimport {MnemonicActionTypes} from \"./types\";\nimport {Seed, Telegram} from \"../reducers/types\";\n\nexport function genMnemonic(payload: Seed): MnemonicActionTypes {\n    return {\n        type: GEN_MNEMONIC,\n        payload\n    }\n};\n\nexport function addMnemonic(payload: Seed): MnemonicActionTypes {\n    return {\n        type: ADD_MNEMONIC,\n        payload\n    }\n};\n\nexport function foundError(payload: Telegram): MnemonicActionTypes{\n    return {\n        type: FOUND_ERROR,\n        payload\n    }\n};\n\nexport function dismissTelegram(): MnemonicActionTypes {\n    return {\n        type: DISMISS_TELEGRAM\n    }\n};\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {Seed} from \"../reducers/types\";\nimport {AppState} from \"../reducers\";\n\ninterface ListProps {\n    seeds: Array<Seed>\n}\n\nconst mapStateToProps = (state: AppState) => {\n    const {main} = state;\n    return {\n        seeds: main.seeds\n    };\n};\n\nconst ConnectedList = ({seeds}: ListProps) => {\n    return (\n        <ul className=\"list-group list-group-flush\">\n            {(seeds && seeds.length > 0) ? (seeds.map(el => (\n                <li className=\"list-group-item\" key={el.id}>\n                    {el.mnemonic}\n                </li>\n            ))) : (\n                <li className=\"list-group-item\">\n                    You have no mnemonic here.\n                </li>\n            )\n            }\n        </ul>\n    );\n};\n\nconst List = connect(mapStateToProps)(ConnectedList);\n\nexport default List;\n","import React from \"react\";\n\ninterface DropdownProps {\n    id: string,\n    src: any,\n    ref?: any,\n    selectedValue: string,\n    title: string,\n    marginClass?: string,\n    onChange: Function\n}\n\nexport default class Dropdown extends React.Component<DropdownProps> {\n\n    onChange(e: any) {\n        const {onChange} = this.props;\n        onChange(e);\n    }\n\n    render() {\n        const {id, src, ref, selectedValue, title, marginClass} = this.props;\n        const className = \"form-control \" + marginClass;\n        return (\n            <select id={id} className={className} ref={ref} onChange={this.onChange.bind(this)}\n                    value={selectedValue}>\n                <option value=\"\" disabled>{title}</option>\n                {Object.keys(src).map((key, idx) => {\n                        const item = src[key];\n                        return (\n                            <option key={key} value={key}>{item}</option>\n                        )\n                    }\n                )}\n            </select>\n        );\n    }\n}\n","import React from \"react\";\nimport {Typeahead} from 'react-bootstrap-typeahead';\n\ninterface DynamicTextProps {\n    id: string,\n    value: Array<string>,\n    options: Array<string>,\n    marginClass?: string,\n    onChange: Function,\n    onInputChange: Function,\n    myRefs: Array<any>\n}\n\nexport default class DynamicText extends React.Component<DynamicTextProps> {\n\n    onChange(id: number, value: string, props: any) {\n        const {onChange} = props;\n        onChange(id, value);\n    }\n\n    onInputChange(id: number, value: string, props: any) {\n        const {onInputChange} = props;\n        onInputChange(id, value);\n    }\n\n    renderReptileText(value: Array<string>, id: string, options: Array<string>, myRefs: Array<any>) {\n        return value.map((item: string, index: number) => {\n                const uid = id + index;\n                let arr_dom = [];\n                const hidden = (index < value.length - 1) ? false : true;\n                arr_dom.push(<div key={uid} className=\"input-group col-4 -col-sm-3 col-md-3 col-lg-3 mb-1\">\n                    <Typeahead\n                        ref={(ref) => myRefs[index] = ref }\n                        id={index.toString()}\n                        options={options}\n                        maxResults={10}\n                        onInputChange={(value) => {\n                            this.onInputChange(index, value, this.props);\n                        }}\n                        onChange={(selected) => {\n                            this.onChange(index, selected[0], this.props)\n                        }}\n                    />\n                    <div className=\"input-group-append ml-3\">\n                        {(!hidden) ? \">\" : <span>&nbsp;&nbsp;</span>}\n                    </div>\n                </div>);\n                return arr_dom;\n            }\n        )\n    }\n\n    render() {\n        const {id, value, marginClass, options, myRefs} = this.props;\n        const className = \"form-group row\" + ((marginClass) ? marginClass : \"\");\n        return (\n            <div key={id} id={id} className={className}>\n                {this.renderReptileText(value, id, options, myRefs)}\n            </div>\n        )\n    }\n}\n","export class ArrayUtil {\n    static repeatElement(num: number, text:string) {\n        let arr = [];\n        for(let i=0; i<num; i++){\n            arr.push(text);\n        }\n        return arr;\n    }\n}\n","import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\nimport {dismissTelegram, genMnemonic} from \"../actions\";\nimport {Seed} from \"../reducers/types\";\nimport {Dispatch} from \"redux\";\nimport Dropdown from \"./Picker/Dropdown\";\nimport DynamicText from \"./Form/DynamicText\";\nimport {ArrayUtil} from \"../utils\";\n// @ts-ignore\nimport bip39 from \"bip39\";\n\n\ninterface ConnectedFormProps {\n    genMnemonic: Function;\n    dismissTelegram: Function;\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        genMnemonic: (seed: Seed) => dispatch(genMnemonic(seed)),\n        dismissTelegram: () => dispatch(dismissTelegram())\n    };\n}\n\nclass ConnectedForm extends Component<ConnectedFormProps, any> {\n    private myRefs: Array<any>;\n    private strength_list: object;\n\n    constructor(props: ConnectedFormProps) {\n        super(props);\n        this.strength_list = {\n            12: \"12\",\n            15: \"15\",\n            18: \"18\",\n            24: \"24\"\n        };\n        const default_strength = 12;\n        this.state = {\n            mnemonic: ArrayUtil.repeatElement(default_strength, \"\"),\n            strength: default_strength\n        };\n        this.handleStrengthChange = this.handleStrengthChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleMnemonicChange = this.handleMnemonicChange.bind(this);\n        this.handleMnemonicInputChange = this.handleMnemonicInputChange.bind(this);\n        this.myRefs = ArrayUtil.repeatElement(default_strength, \"\");\n\n    }\n\n    handleStrengthChange(event: any) {\n        const {value} = event.target;\n        this.clear();\n        this.setState({\n            mnemonic: ArrayUtil.repeatElement(value, \"\"),\n            strength: value\n        });\n    }\n\n    handleMnemonicChange(id: number, value: string) {\n        let new_mnemonic = [...this.state.mnemonic];\n        new_mnemonic[id] = value;\n        this.setState({\n            mnemonic: new_mnemonic\n        });\n    }\n\n    handleMnemonicInputChange(id: number, value: string) {\n        this.handleMnemonicChange(id, value);\n    }\n\n    handleSubmit(event: any) {\n        event.preventDefault();\n        const {mnemonic, strength} = this.state;\n        this.props.dismissTelegram();\n        this.props.genMnemonic({mnemonic, id: \"\"});\n        this.clear();\n        this.setState({mnemonic: ArrayUtil.repeatElement(strength, \"\")});\n    }\n\n    clear() {\n        this.myRefs.forEach((item) => {\n            if (item && typeof item.clear === 'function') {\n                item.clear();\n            }\n        });\n    }\n\n    render() {\n        const {mnemonic, strength} = this.state;\n        const options = bip39.wordlists.english;\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"form-group\">\n                    <label htmlFor=\"strength\">Strength</label>\n                    <Dropdown id=\"strength\" src={this.strength_list} title=\"Choose Strength\"\n                              marginClass=\"mt-1\"\n                              selectedValue={strength}\n                              onChange={this.handleStrengthChange}/>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"mnemonic\">BIP39 Mnemonic</label>\n                    <DynamicText id=\"mnemonic\" value={mnemonic} options={options} myRefs={this.myRefs}\n                                 onInputChange={this.handleMnemonicInputChange} onChange={this.handleMnemonicChange}/>\n                </div>\n                <button type=\"submit\" className=\"btn btn-success btn-lg\">\n                    SEND\n                </button>\n            </form>\n        );\n    }\n}\n\nconst Form = connect(null, mapDispatchToProps)(ConnectedForm);\n\nexport default Form;\n","import pjson from '../package.json';\n\nconst VERSION = \"v\" + pjson.version;\nconst REPOSITORY = pjson.repository.url;\nconst TAG = pjson.repository.url + \"/tree/\" + VERSION\n\nexport {\n    VERSION,\n    REPOSITORY,\n    TAG\n}\n","import React from \"react\";\nimport {Telegram} from \"../../reducers/types\";\nimport {Alert} from \"react-bootstrap\";\n\n\ninterface TelegramDismissibleProps {\n    telegram?: Telegram\n    setShow: () => void;\n}\n\nexport default class TelegramDismissible extends React.Component<TelegramDismissibleProps, any> {\n    render() {\n        const {telegram, setShow} = this.props;\n        if (telegram && telegram.show) {\n            return (\n                <Alert variant={telegram.variant} onClose={setShow} dismissible>\n                    <Alert.Heading>{telegram.message}</Alert.Heading>\n                </Alert>\n            );\n        } else {\n            return null;\n        }\n    }\n}\n","import React, {Component} from \"react\";\nimport List from \"./List\";\nimport Form from \"./Form\";\nimport Container from \"react-bootstrap/Container\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {REPOSITORY, VERSION, TAG} from \"../../env\";\nimport {Telegram} from \"../reducers/types\";\nimport {connect} from \"react-redux\";\nimport {AppState} from \"../reducers\";\nimport TelegramDismissible from \"./Alert/TelegramDismissible\";\nimport {Dispatch} from \"redux\";\nimport {dismissTelegram} from \"../actions\";\n\nconst marginTop = {\n    marginTop: '80px',\n    marginLeft: '2px',\n    marginRight: '2px'\n};\n\nconst margin = {\n    margin: '10px'\n};\n\ninterface AppFormProps {\n    dismissTelegram: Function;\n    telegram?: Telegram\n}\n\nconst mapStateToProps = (state: AppState) => {\n    const {main} = state;\n    return {\n        telegram: main.telegram\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        dismissTelegram: () => dispatch(dismissTelegram())\n    };\n};\n\nclass App extends Component<AppFormProps, any> {\n    constructor(props: AppFormProps) {\n        super(props);\n        this.setShow = this.setShow.bind(this);\n    }\n\n    setShow(){\n        this.props.dismissTelegram();\n    }\n\n    render() {\n        const {telegram} = this.props;\n        return (\n            <Container fluid={true}>\n                <Navbar fixed=\"top\" expand=\"lg\" bg=\"dark\" variant=\"dark\">\n                    <Navbar.Brand href=\"#\">\n                        Your Own Mnemonic\n                    </Navbar.Brand>\n                    <Nav className=\"ml-auto pr-md-5\">\n                        <Nav.Link target=\"_blank\" href={TAG}>{VERSION}</Nav.Link>\n                        <Nav.Link target=\"_blank\" href={REPOSITORY}>\n                            <FontAwesomeIcon size=\"lg\" icon={['fab', 'github']}/>\n                        </Nav.Link>\n                    </Nav>\n                </Navbar>\n                <div style={marginTop}>\n                    <TelegramDismissible telegram={telegram} setShow={this.setShow} />\n                    <div className=\"row\" style={margin}>\n                        <div className=\"offset-md-1\">\n                            <h2>Generate Mnemonic</h2>\n                            <Form/>\n                        </div>\n                    </div>\n                    <div className=\"row\" style={margin}>\n                        <div className=\"offset-md-1\">\n                            <h2>Mnemonic</h2>\n                            <List/>\n                        </div>\n                    </div>\n                </div>\n            </Container>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./js/store/index\";\nimport App from \"./js/components/App\";\nimport { register } from './serviceWorker';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\n\nfunction noop() {}\n\nif (process.env.NODE_ENV !== 'development') {\n    console.log = noop;\n    console.warn = noop;\n    console.error = noop;\n}\n\nlibrary.add(fab);\n\nrender(\n  <Provider store={store}>\n      <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nregister();\n"],"sourceRoot":""}